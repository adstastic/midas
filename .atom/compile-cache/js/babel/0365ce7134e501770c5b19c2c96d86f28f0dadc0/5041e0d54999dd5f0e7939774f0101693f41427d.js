#!/usr/bin/env node

var open = require('nodegit').Repository.open;
var fs = require('fs');

// node runtime is relative, whereas the package.json file is relative to cwd
var pkg = require('../package.json');

var authors = {};
var rankings = {};

var PREVIOUS_RELEASE_NOTE = new RegExp('^Prepare ' + pkg['version'] + ' releases*');
var accumulatedChanges = [];
var collecting = true;

var ignore = {
  'dev': 'dev@debian7devel',
  '=': '='
};

open('.').then(function (repo) {
  return repo.getHeadCommit();
})
// Display information about commits at HEAD
.then(function (headCommit) {
  // Create a new history event emitter.
  var history = headCommit.history();

  // Listen for commit events from the history.
  history.on('commit', function (commit) {
    var author = commit.author();
    var name = author.name();
    var email = author.email();

    var message = commit.message();

    if (collecting) {
      if (message.match(PREVIOUS_RELEASE_NOTE)) {
        collecting = false;
      } else {
        accumulatedChanges.push(message);
      }
    }

    if (!(ignore[name] && ignore[name] === email)) {
      // Take their most recent commit as the email they care about
      // Assumes everyone has a unique name
      authors[name] = authors[name] || email;

      // Count up their total number of commits
      rankings[name] = rankings[name] || 0;
      rankings[name]++;
    }
  });

  history.on('end', function (commits) {

    console.log('Summarize these for the CHANGELOG: ');
    console.log('>>>>>>>>>>>>>>>');
    for (var i = 0; i < accumulatedChanges.length; i++) {
      console.log(accumulatedChanges[i]);
    }
    console.log('<<<<<<<<<<<<<<<');

    // Create the updated contributors array
    var contributors = [];
    for (var name in rankings) {
      contributors.push({ 'name': name, 'email': authors[name] });
    }
    pkg['contributors'] = contributors;

    fs.writeFile('package.json', JSON.stringify(pkg, null, 2), function (err) {
      if (err) {
        console.err(err);
      } else {
        console.log('package.json written');
      }
    });
  });

  // Start emitting events.
  history.start();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9jYXRoL2hvbWVzMi96Y2FwYW11Ly5hdG9tL3BhY2thZ2VzL3NjcmlwdC91dGlscy91cGRhdGVQYWNrYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUM5QyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7OztBQUd2QixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQTs7QUFFcEMsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO0FBQ2hCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQTs7QUFFakIsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFlBQWEsQ0FBQyxDQUFDO0FBQ3JGLElBQUksa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0FBQzNCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsSUFBSSxNQUFNLEdBQUc7QUFDWCxPQUFLLEVBQUUsa0JBQWtCO0FBQ3pCLEtBQUcsRUFBRSxHQUFHO0NBQ1QsQ0FBQTs7QUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ04sSUFBSSxDQUFDLFVBQVMsSUFBSSxFQUFFO0FBQ25CLFNBQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQzdCLENBQUM7O0NBRUQsSUFBSSxDQUFDLFVBQVMsVUFBVSxFQUFFOztBQUV6QixNQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7OztBQUduQyxTQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNwQyxRQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDN0IsUUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3pCLFFBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFM0IsUUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDOztBQUUvQixRQUFJLFVBQVUsRUFBRTtBQUNkLFVBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFDO0FBQ3RDLGtCQUFVLEdBQUcsS0FBSyxDQUFDO09BQ3BCLE1BQ0k7QUFDSCwwQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7T0FDbEM7S0FDRjs7QUFFRCxRQUFJLEVBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUEsRUFBSTs7O0FBR2hELGFBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDOzs7QUFHdkMsY0FBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDcEMsY0FBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7S0FDakI7R0FFRixDQUFDLENBQUM7O0FBRUgsU0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsVUFBUyxPQUFPLEVBQUU7O0FBRWxDLFdBQU8sQ0FBQyxHQUFHLENBQUMscUNBQXFDLENBQUMsQ0FBQztBQUNuRCxXQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDL0IsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNsRCxhQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEM7QUFDRCxXQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7OztBQUcvQixRQUFJLFlBQVksR0FBRyxFQUFFLENBQUE7QUFDckIsU0FBSyxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUU7QUFDekIsa0JBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFBO0tBQzFEO0FBQ0QsT0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFlBQVksQ0FBQzs7QUFFbkMsTUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsR0FBRyxFQUFFO0FBQ3ZFLFVBQUksR0FBRyxFQUFFO0FBQ1AsZUFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNsQixNQUNJO0FBQ0gsZUFBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO09BQ3JDO0tBQ0YsQ0FBQyxDQUFDO0dBRUosQ0FBQyxDQUFDOzs7QUFHSCxTQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDakIsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9jYXRoL2hvbWVzMi96Y2FwYW11Ly5hdG9tL3BhY2thZ2VzL3NjcmlwdC91dGlscy91cGRhdGVQYWNrYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgb3BlbiA9IHJlcXVpcmUoXCJub2RlZ2l0XCIpLlJlcG9zaXRvcnkub3BlbjtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8vIG5vZGUgcnVudGltZSBpcyByZWxhdGl2ZSwgd2hlcmVhcyB0aGUgcGFja2FnZS5qc29uIGZpbGUgaXMgcmVsYXRpdmUgdG8gY3dkXG52YXIgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJylcblxudmFyIGF1dGhvcnMgPSB7fVxudmFyIHJhbmtpbmdzID0ge31cblxudmFyIFBSRVZJT1VTX1JFTEVBU0VfTk9URSA9IG5ldyBSZWdFeHAoXCJeUHJlcGFyZSBcIiArIHBrZ1tcInZlcnNpb25cIl0gKyBcIiByZWxlYXNlXFxzKlwiKTtcbnZhciBhY2N1bXVsYXRlZENoYW5nZXMgPSBbXVxudmFyIGNvbGxlY3RpbmcgPSB0cnVlO1xuXG52YXIgaWdub3JlID0ge1xuICBcImRldlwiOiBcImRldkBkZWJpYW43ZGV2ZWxcIixcbiAgXCI9XCI6IFwiPVwiXG59XG5cbm9wZW4oXCIuXCIpXG4gIC50aGVuKGZ1bmN0aW9uKHJlcG8pIHtcbiAgICByZXR1cm4gcmVwby5nZXRIZWFkQ29tbWl0KCk7XG4gIH0pXG4gIC8vIERpc3BsYXkgaW5mb3JtYXRpb24gYWJvdXQgY29tbWl0cyBhdCBIRUFEXG4gIC50aGVuKGZ1bmN0aW9uKGhlYWRDb21taXQpIHtcbiAgICAvLyBDcmVhdGUgYSBuZXcgaGlzdG9yeSBldmVudCBlbWl0dGVyLlxuICAgIHZhciBoaXN0b3J5ID0gaGVhZENvbW1pdC5oaXN0b3J5KCk7XG4gIFxuICAgIC8vIExpc3RlbiBmb3IgY29tbWl0IGV2ZW50cyBmcm9tIHRoZSBoaXN0b3J5LlxuICAgIGhpc3Rvcnkub24oXCJjb21taXRcIiwgZnVuY3Rpb24oY29tbWl0KSB7XG4gICAgICB2YXIgYXV0aG9yID0gY29tbWl0LmF1dGhvcigpO1xuICAgICAgdmFyIG5hbWUgPSBhdXRob3IubmFtZSgpO1xuICAgICAgdmFyIGVtYWlsID0gYXV0aG9yLmVtYWlsKCk7XG5cbiAgICAgIHZhciBtZXNzYWdlID0gY29tbWl0Lm1lc3NhZ2UoKTtcblxuICAgICAgaWYgKGNvbGxlY3RpbmcpIHtcbiAgICAgICAgaWYobWVzc2FnZS5tYXRjaChQUkVWSU9VU19SRUxFQVNFX05PVEUpKXtcbiAgICAgICAgICBjb2xsZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRDaGFuZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCEgKCBpZ25vcmVbbmFtZV0gJiYgaWdub3JlW25hbWVdID09PSBlbWFpbCApKSB7XG4gICAgICAgIC8vIFRha2UgdGhlaXIgbW9zdCByZWNlbnQgY29tbWl0IGFzIHRoZSBlbWFpbCB0aGV5IGNhcmUgYWJvdXRcbiAgICAgICAgLy8gQXNzdW1lcyBldmVyeW9uZSBoYXMgYSB1bmlxdWUgbmFtZVxuICAgICAgICBhdXRob3JzW25hbWVdID0gYXV0aG9yc1tuYW1lXSB8fCBlbWFpbDtcbiAgICAgICAgXG4gICAgICAgIC8vIENvdW50IHVwIHRoZWlyIHRvdGFsIG51bWJlciBvZiBjb21taXRzXG4gICAgICAgIHJhbmtpbmdzW25hbWVdID0gcmFua2luZ3NbbmFtZV0gfHwgMFxuICAgICAgICByYW5raW5nc1tuYW1lXSsrXG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIGhpc3Rvcnkub24oXCJlbmRcIiwgZnVuY3Rpb24oY29tbWl0cykge1xuXG4gICAgICBjb25zb2xlLmxvZyhcIlN1bW1hcml6ZSB0aGVzZSBmb3IgdGhlIENIQU5HRUxPRzogXCIpO1xuICAgICAgY29uc29sZS5sb2coXCI+Pj4+Pj4+Pj4+Pj4+Pj5cIik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY3VtdWxhdGVkQ2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZyhhY2N1bXVsYXRlZENoYW5nZXNbaV0pO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coXCI8PDw8PDw8PDw8PDw8PDxcIik7XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgdXBkYXRlZCBjb250cmlidXRvcnMgYXJyYXlcbiAgICAgIHZhciBjb250cmlidXRvcnMgPSBbXVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiByYW5raW5ncykge1xuICAgICAgICBjb250cmlidXRvcnMucHVzaCh7XCJuYW1lXCI6IG5hbWUsIFwiZW1haWxcIjogYXV0aG9yc1tuYW1lXX0pXG4gICAgICB9XG4gICAgICBwa2dbJ2NvbnRyaWJ1dG9ycyddID0gY29udHJpYnV0b3JzO1xuXG4gICAgICBmcy53cml0ZUZpbGUoXCJwYWNrYWdlLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkocGtnLCBudWxsLCAyKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFja2FnZS5qc29uIHdyaXR0ZW5cIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIFxuICAgIC8vIFN0YXJ0IGVtaXR0aW5nIGV2ZW50cy5cbiAgICBoaXN0b3J5LnN0YXJ0KCk7XG4gIH0pO1xuXG4iXX0=